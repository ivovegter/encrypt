#!/bin/bash
#
# encrypt -- Simple directory encryption.
# Version 2.0 (14/02/2015)
# Copyright (C) 2014, 2015 Ivo Vegter
# Licensed under GNU GPL v3.0
#
# Encrypts a directory, or decrypts a previously encrypted directory.
# Wraps the underlying works into two simple commands:
#
# encrypt <directory>
# - encrypt the contents of <directory>. This is slow the first time
#   it is done.
# encrypt -d <directory> OR decrypt <directory>
# - decrypt the contents of a previously encrypted <directory>, and
#   make it available as clear-text. (The encrypted directory remains
#   as <directory>.crypt.
#
# The initial encryption will securely wipe the original unencrypted
# contents. This is extra slow, so there is an -f option to skip this
# step.
#
# For decryption, a password may be passed on the command line, using
# the -p option. This is not possible during encryption. Instead, it
# will pause to ask for the encyption passphrase, and any password
# passed as a command line parameter will be ignored.
#
# To add files to an encrypted directory, first decrypt it. Move files
# as usual. This will be noticeably slower than ordinary file
# moves. Then encrypt the directory again.
#
# 'encrypt' tries to handle most conceivable (and some inconceivable)
# real-world situations gracefully, to make its use as intuitive as
# possible.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# A copy of the full GNU General Public Licence can be found at:
# http://www.gnu.org/licenses/

shopt -s globstar
shopt -s dotglob

# Default time before automatically unmounting the decrypted volume:
idletime=30

echo_usage () { 
    echo -e "Usage: encrypt [-d] [-f] [-p password] <directory>"
    USAGE=$(cat <<'EOF' 
Encrypts or decrypts the contents of <directory>. This is a wrapper for 'encfs'.

-d   Decrypt instead of encrypting. The encrypted directory is saved as .<directory>.crypt. The 'decrypt' command is an alias for 'encrypt -d'.

-f   The initial encryption also securely wipes the original data. To skip this step, trading speed for security, specify the fast option, -f.

-p   For decryption, a password may be passed on the command line, using the -p option. During encryption, it will pause to ask for the encyption passphrase.

-i   The idle time in minutes before the decrypted directory is automatically re-encrypted (unmounted). The default is 30 minutes. If this happens, the en-/decrypted directory will appear to be empty. It can be restored by running 'encrypt -d' (or 'decrypt') again.

To add files to an encrypted directory, first decrypt it. Move files as usual, using mv or rsync. This will be noticeably slower than ordinary moves. Then encrypt the directory again.
EOF
) 
    IFSBAK=$IFS 
    IFS='' 
    echo -e ${USAGE}
    IFS=$IFSBAK 
    unset IFSBAK 
}

dir_resolve() {
    # Turns a given path into a fully-qualified, link-resolved
    # path. Returns a non-zero exit status if the path does not exist.
    # This works by trying to change to the desired directory. If that
    # fails, it quells the error message, but returns the exit status.
    cd "$*" 2>/dev/null || return $?  
    echo -e "$(pwd -P)" # output full, link-resolved path
}

success() {
    # Exits with an optional success message.
    if [ -n "$1" ]; then
	echo -e "SUCCESS: $1"
	exit 0
    else
	echo -e "SUCCESS."
        exit 0
    fi
}

error () {
    # Exits with an optional error message.
    if [ -n "$1" ]; then
	echo -e "ERROR: $1"
	exit 1
    else
	echo -e "ERROR."
        exit 1
    fi
}

# Process command line arguments

decrypt=false
fast=false
password=""
help=false
argdir=""

set -- $(getopt dfhp: "$@")
while [ $# -gt 0 ]
do
    case "$1" in
    (-d) decrypt=true;;
    (-f) fast=true;;
    (-h) help=true;;
    (-p) password="${2}"; shift;;
    (--) shift; argdir="$*"; break;;
    (-*) help=true; echo -e "Unrecognised option $1" 1>&2; break;;
    (*)  argdir="$*"; break;;
    esac
    shift
done

# Exit on help or invalid command line arguments.
if [[ "${help}" == "true" ]]; then 
    echo_usage
    error "Aborting."
fi

# Save PWD
oldpwd=$(pwd)

# Fully resolve given directory name.
if [[ "${argdir}" != *\/* ]]; then
    # If path was not specified on the command line, assume pwd. 
    directory="$(pwd -P)/${argdir}"
elif [[ "${argdir%/*}" != "" ]]; then
    # Turn relative path into absolute path.
    directory="$(dir_resolve \"${argdir%/*}\")/${argdir##*/}"
    if [[ $? -ne 0 ]]; then
        error "${argdir} not found."
    fi
else
    directory="${argdir}"
fi

cleardir="${directory}"  # Sometimes used interchangeably with $directory, depending on semantic context.
cryptdir=$(dirname "${directory}")/.$(basename "${directory}").crypt  # Always refers to hidden, saved, encrypted directory.

# Main function for first-time encryption:
encrypt_directory() {
    echo -e "You will be asked for a password with which to encrypt your data. Without this password YOUR DATA CANNOT BE RECOVERED by ordinary means. That, after all, is the point of encryption.\n\nDirectory to be encrypted: ${directory}\n"
    while true; do
        read -e -p "Continue with encryption? (y/n): " confirm
        if [[ "${confirm}" =~ ^[Yy]$ ]]; then
            break
        else
            echo "Aborted by user."
	    return 1
        fi
    done
    echo "DEBUG: directory=${directory}"
    tempdir=$(dirname "${directory}")/.$(basename "${directory}").temp
    echo "DEBUG: tempdir=${tempdir}"
    mv "${directory}" "${tempdir}" || return $?
    echo "DEBUG: cryptdir=${cryptdir}"
    mkdir -p "${cryptdir}" || return $?
    echo "DEBUG: cleardir=${cleardir}"
    mkdir -p "${cleardir}" || return $?
    # Mount empty directory with .crypt extension as an encrypted file system:
    encfs --standard "${cryptdir}" "${cleardir}" 1>/dev/null
    echo -e "\nEncrypting ${directory} contents. This can take a while."
    # Copy stuff into encrypted file system:
    rsync -a "${tempdir}/" "${cleardir}" || return $?
    # Unmount encrypted file system:
    sync
    until fusermount -u "${cleardir}"; do sleep 1; done
    rmdir "${cleardir}" || return $?
    # Move .crypt file where $cleardir used to be.
    mv "${cryptdir}" "${cleardir}" || return $?
    if [ "${fast}" != true ]; then
        echo -e "Shredding original ${directory} contents. This can take another while.\n"
        find "${tempdir}" -print | xargs shred -uz 2>/dev/null
    fi
    rm -rf "${tempdir}" || return $?
    return 0
}

# If the encrypted directory (or directory to be encrypted) does not 
# exist, exit.
if [[ ! -d "${directory}" ]]; then
    error "${directory} does not exist. Aborting."
fi

# If $directory is a mounted encfs volume
mount 2>/dev/null | grep "encfs" 2>/dev/null | grep "$directory" &>/dev/null && ismount="true" || ismount="false"
if [[ "${ismount}" == "true" ]]; then
    # $directory exists and is a mounted encfs volume
    if [[ "${decrypt}" == "true" ]]; then
        error "${directory} is already decrypted. To re-encrypt it, run 'encrypt' without the -d option."
    else
        # to encrypt $directory ($cleardir, in this context), simply
        # unmount it and restore the .crypt file to $cleardir
        until fusermount -u "${cleardir}"; do sleep 1; done
        rmdir "${cleardir}" 2>/dev/null
        mv "${cryptdir}" "${cleardir}" || error "An unexpected error occurred. Could not move ${cryptdir} to ${cleardir}."
        success "${cleardir} encrypted. To decrypt it, run 'encrypt' with the -d option (or try 'decrypt')."
    fi
fi

# If $directory is an encrypted directory
stat -t "${directory}"/.encfs*.xml >/dev/null 2>&1 && encrypted="true" || encrypted="false"
if [[ "${encrypted}" == "true" ]]; then
    if [[ "${decrypt}" == "true" ]]; then
	mv "${directory}" "${cryptdir}" || error "An unexpected error occurred. Could not create ${cryptdir}."
        # Go mount it
        mkdir -p "${cleardir}"
        if [[ "${password}" != "" ]]; then
            echo -e "${password}" | encfs --stdinpass --idle="${idletime}" "${cryptdir}" "${cleardir}"
        else
            encfs --idle="${idletime}" "${cryptdir}" "${cleardir}"
        fi
	if [[ $? -eq 0 ]]; then
	    success "${directory} decrypted. To encrypt it again, run 'encrypt'. Idle time before automatic re-encryption is ${idletime} minutes."
	else
	    rmdir "${cleardir}"
	    mv "${cryptdir}" "${cleardir}" || error "An unexpected error occurred. Could not move ${cryptdir} to ${cleardir}."
	    error "An error occurred while mounting the encrypted directory. Unable to decrypt ${directory}."
        fi
    else
	error "${directory} is already encrypted. To decrypt it, run 'encrypt' with the -d option (or try 'decrypt')."
    fi
fi

# So $directory exists but is neither a mounted encfs (decrypted)
# volume, nor an encrypted directory. This leaves various options.
if rmdir "${directory}" 2>/dev/null; then
    # If it is empty...
    mkdir -p "${directory}"  # ...recreate it
    if [[ -d "${cryptdir}" ]]; then
	# If ${cryptdir} exists, then it timed out instead of being re-encrypted manually.
	if [[ "${decrypt}" == "true" ]]; then
	    # To decrypt it again, simply decrypt (mount) $cryptdir
	    # into (onto) it.
            if [[ "${password}" != "" ]]; then
                echo -e "${password}" | encfs --stdinpass --idle="${idletime}" "${cryptdir}" "${cleardir}"
            else
                encfs --idle="${idletime}" "${cryptdir}" "${cleardir}"
                if [[ $? -eq 0 ]]; then
                    success "${directory} decrypted. To encrypt it again, run 'encrypt'. Idle time before automatic re-encryption is ${idletime} minutes."
                else
                    rmdir "${cleardir}"
                    mv "${cryptdir}" "${cleardir}" || error "An unexpected error occurred. Could not move ${cryptdir} to ${cleardir}."
                    error "An error occurred while mounting the encrypted directory. Unable to decrypt ${directory}."
                fi
	    fi
	else
	    # To encrypt it, simply restore $cryptdir to $cleardir
	    mv "${cryptdir}" "${cleardir}" || error "An unexpected error occurred. Could not move ${cryptdir} to ${cleardir}."
            success "${directory} encrypted. To decrypt it, run 'encrypt' with the -d option (or try 'decrypt')."
        fi
    else
	# If $cryptdir does not exist, it is simply an encryption request on an empty directory.
        if encrypt_directory; then
            success "${directory} encrypted. To decrypt it, run 'encrypt' with the -d option (or try 'decrypt')."
        else
            error "${directory} could not be encrypted, for unknown and inexplicable reasons, since encrypting an empty directory should not be very complicated."
        fi
    fi
else
    # $directory is not empty...
    if [[ -d "${cryptdir}" ]]; then
	# ...but there is a saved crypt file. This is weird.
	if [[ "${decrypt}" == true ]]; then
	    error "${directory} is not empty, but a non-matching encrypted version was saved at ${cryptdir}. The safest option would be to move the contents of ${directory} before trying to decrypt it again. If decryption is successful, compare the two directories. The removed content may be moved back to (or merged into) the newly decrypted directory in order to be included in its encrypted version. Alternatively, to simply restore the saved version, delete ${directory} and try to decrypt it again."
        else
	    error "${directory} cannot be encrypted because a non-matching encrypted version was saved at ${cryptdir}. The safest option would be to rename ${directory} before trying to encrypt it, so ${cryptdir} can be decrypted with its original name. Alternatively, remove ${cryptdir} first and try to encrypt ${directory} again."
        fi
    else
	# Finally, we're dealing with a normal directory, which we
	# might want to encrypt.
	if [[ "${decrypt}" == true ]]; then
	    # ...except if we were ordered to do otherwise.
	    error "${directory} is not encrypted. Nothing to decrypt. To encrypt ${directory}, use 'encrypt' without the -d option."
	else
            # Yay! Go forth and encrypt
            if encrypt_directory; then
		success "${directory} encrypted. To decrypt it, run 'encrypt' with the -d option (or try 'decrypt')."
            else
                error "${directory} could not be encrypted, for unknown and inexplicable reasons."
            fi
	fi
    fi
fi

exit
